import java.util.*;
public class CircularQueue {
static class Queues{
int queue[] = new int [5];
int n = queue.length;
int front = -1, rear = -1;
//Enqueue
void enqueue(int val){
if(front == -1 && rear == -1){
front = rear = 0;
queue[rear] = val;
}
else if((rear+1)%n == front){
System.out.println("Queue Full");
System.exit(0);
}
else{
rear = (rear+1)%n;
queue[rear] = val;
}
}
//Deueue
void dequeue(){
if(front == -1 && rear == -1){
System.out.println("Queue Empty");
System.exit(0);
}
else if(front == rear){
front = rear = -1;
}
else{
front=(front+1)%n;
}
}
//Display
void display(){
if(front == -1){
System.out.print("Queue is Empty");
return;
}
if(rear>=front){
for(int i=front;i<=rear;i++){
System.out.print(queue[i]+" ");
}
System.out.println();
}
else
{
for(int i = front; i < n;i++){
System.out.print(queue[i]+" ");
}
for(int i = 0; i <= rear; i++)
{
System.out.print(queue[i]+" ");
}
System.out.println();
}
}
//Front
int getFront(){
return front;
}
//Rear
int getRear(){
return rear;
}
}
public static void main(String[] args) {
Queues q = new Queues();
q.enqueue(1);
q.enqueue(3);
q.enqueue(5);
q.enqueue(7);
q.enqueue(9);
q.display();
System.out.println("After removing 2 elements : ");
q.dequeue();
q.dequeue();
q.display();
System.out.println("After adding an element :");
q.enqueue(0);
q.display();
}}
